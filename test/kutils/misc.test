# -*-Tcl-*-
#-----------------------------------------------------------------------
# TITLE:
#    misc.test
#
# AUTHOR:
#    Will Duquette
#
# DESCRIPTION:
#    Tcltest test suite for kutils(n) misc.tcl
#
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# Initialize tcltest(n)

if {[lsearch [namespace children] ::tcltest] == -1} {
    package require tcltest 2.2 
    eval ::tcltest::configure $argv
}
 
#-----------------------------------------------------------------------
# Load the package to be tested

package require kutils

#-----------------------------------------------------------------------
# Test Suite
#
# The tests run in a namespace so as not to interfere with other
# test suites.

namespace eval ::kutils::test {
    #-------------------------------------------------------------------
    # Set up the test environment

    # Import tcltest(n)
    namespace import ::tcltest::*

    # Import the code to be tested
    namespace import ::kutils::*

    #-------------------------------------------------------------------
    # Setup

    # cleanup
    #
    # Cleans up after all tests.

    proc cleanup {} {
        set ::kutils::verbose 0
    }


    #-------------------------------------------------------------------
    # vputs

    test vputs-1.1 {Creates no output by default} -body {
        vputs "some text"
    } -cleanup {
        cleanup
    } -output {}

    test vputs-1.2 {Creates output when verbose is enabled} -setup {
        set ::kutils::verbose 1
    } -body {
        vputs "some text"
    } -cleanup {
        cleanup
    } -output "some text\n"

    test vputs-1.3 {Joins multiple strings} -setup {
        set ::kutils::verbose 1
    } -body {
        vputs "some text" "some more text" "even more text"
    } -cleanup {
        cleanup
    } -output "some text some more text even more text\n"

    #-------------------------------------------------------------------
    # checkargs

    test checkargs-1.1 {(0,-): Zero args is OK} -body {
        checkargs test 0 - {args...} {}
    } -result {}

    test checkargs-1.2 {(0,-): Many args are OK} -body {
        checkargs test 0 - {args...} {1 2 3 4 5 6 7 8 9}
    } -result {}

    test checkargs-1.3 {(1,2): 1 arg is OK} -body {
        checkargs test 1 2 {x y} {1}
    } -result {}
    
    test checkargs-1.4 {(1,2): 2 args are OK} -body {
        checkargs test 1 2 {x ?y?} {1 2}
    } -result {}

    test checkargs-2.1 {(1,2): zero args are not OK} -body {
        checkargs test 1 2 {x ?y?} {}
    } -returnCodes {
        error
    } -result {Usage: kite test x ?y?}

    test checkargs-2.2 {(1,2): 3 args are not OK} -body {
        checkargs test 1 2 {x ?y?} {1 2 3}
    } -returnCodes {
        error
    } -result {Usage: kite test x ?y?}

    test checkargs-2.3 {throws FATAL on error} -body {
        catch {checkargs test 0 0 {} {1 2 3}} result eopts
        dict get $eopts -errorcode
    } -result {FATAL}

    #-------------------------------------------------------------------
    # ladd

    test ladd-1.1 {value is not yet in list} -body {
        set a {foo bar}
        set b [ladd a baz]
        list $a $b
    } -result {{foo bar baz} {foo bar baz}}

    test ladd-1.2 {value is already in list} -body {
        set a {foo bar}
        set b [ladd a bar]
        list $a $b
    } -result {{foo bar} {foo bar}}

    test ladd-1.3 {List doesn't yet exist} -body {
        set b [ladd nonesuch bar]
        list $nonesuch $b
    } -cleanup {
        unset nonesuch
    } -result {bar bar}

    #-----------------------------------------------------------------------
    # lshift

    test lshift-1.1 {lshift: normal list} -body {
        set list {a b c}
        set value [lshift list]
        list $value $list
    } -result {a {b c}}

    test lshift-1.2 {lshift: list with one element} -body {
        set list {a}
        set value [lshift list]
        list $value $list
    } -result {a {}}

    test lshift-1.3 {lshift: list with no elements} -body {
        set list {}
        set value [lshift list]
        list $value $list
    } -result {{} {}}

    #-------------------------------------------------------------------
    # outdent

    test outdent-1.1 {outdent: empty block} -body {
        outdent {}
    } -result {}
    
    test outdent-1.2 {outdent: leading blank line} -body {
        outdent {
                  Now that we have this,
                  we can make things
                  look a lot nicer.}
    } -result {Now that we have this,
we can make things
look a lot nicer.}

    test outdent-1.3 {outdent: trailing blank line} -body {
        outdent {Now that we have this,
                  we can make things
                  look a lot nicer.
                }
    } -result {Now that we have this,
                  we can make things
                  look a lot nicer.}
           
    #-------------------------------------------------------------------
    # prepare

    test prepare-1.1 {trims var} -body {
        set parm "  my value  "
        prepare parm
        set parm
    } -result {my value}

    test prepare-1.2 {-tolower} -body {
        set parm "My Value"
        prepare parm -tolower
        set parm
    } -result {my value}

    test prepare-1.3 {-toupper} -body {
        set parm "My Value"
        prepare parm -toupper
        set parm
    } -result {MY VALUE}

    test prepare-1.3 {-required, success} -body {
        set parm "My Value"
        prepare parm -required
    } -result {}

    test prepare-2.1 {error, unknown option} -body {
        set parm "My Value"
        prepare parm -nonesuch
    } -returnCodes {
        error
    } -result {Unknown option: "-nonesuch"}

    test prepare-2.2 {error, -required but empty} -body {
        set parm ""
        prepare parm -required
    } -returnCodes {
        error
    } -result {Missing parm value}

    #-------------------------------------------------------------------
    # readfile
    
    test readfile-1.1 {error, cannot read file} -body {
        readfile noSuchFile.txt
    } -returnCodes {
        error
    } -match glob -result {*: no such file or directory}

    test readfile-1.2 {reads file successful} -setup {
        set a "file contents"
        makeFile $a readfile-1.2.txt
    } -body {
        set b [readfile readfile-1.2.txt]
        expr {$b eq "$a\n"}
    } -result {1}

    #-------------------------------------------------------------------
    # writefile
    
    test writefile-1.1 {writes file to disk} -body {
        set fname "writefile-1.1.txt"
        set a "my content"
        writefile $fname $a
        set b [readfile $fname]

        expr {$a eq $b}
    } -cleanup {
        removeFile $fname
    } -result {1}

    test writefile-1.2 {vputs on write} -body {
        set ::kutils::verbose 1
        set fname "writefile-1.2.txt"
        set a "my content"
        writefile $fname $a
    } -cleanup {
        removeFile $fname
        cleanup
    } -match glob -output "writefile <*>\n"

    test writefile-1.3 {Writes ifchanged} -body {
        set fname "writefile-1.3.txt"
        set a "my content"
        writefile $fname $a
        set ::kutils::verbose 1
        writefile $fname "$a plus" -ifchanged
    } -cleanup {
        removeFile $fname
        cleanup
    } -match glob -output "writefile <*>\n"

    test writefile-1.4 {Doesn't write when unchanged} -body {
        set fname "writefile-1.3.txt"
        set a "my content"
        writefile $fname $a
        set ::kutils::verbose 1
        writefile $fname $a -ifchanged
    } -cleanup {
        removeFile $fname
        cleanup
    } -match glob -output {}

    #-------------------------------------------------------------------
    # generate
    
    test generate-1.1 {generates from template} -body {
        set fname "generate-1.1.txt"
        set mapping {
            %project my-test
            %kitname text
        }
        generate generate_test $mapping . $fname
        readfile $fname
    } -cleanup {
        removeFile $fname
    } -result {project=<my-test> kitname=<text>}


    #-------------------------------------------------------------------
    # Cleanup

    cleanupTests
}

namespace delete ::kutils::test







