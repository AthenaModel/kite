#-----------------------------------------------------------------------
# TITLE:
#   subtree_kiteinfo.tcl
#
# AUTHOR:
#   Will Duquette
#
# DESCRIPTION:
#   Kite: app_kite(n), "kiteinfo" subtree writer.
#
#-----------------------------------------------------------------------

namespace eval subtree:: {
    namespace export \
        kiteinfo
}

# kiteinfo metadata
#
# metadata   - The project metata as an [array get] dictionary.
#
# Saves the kiteinfo subtree to lib/kiteinfo/*.

proc subtree::kiteinfo {metadata} {
    treefile lib/kiteinfo/pkgIndex.tcl   [KiteInfo_pkgIndex]
    treefile lib/kiteinfo/pkgModules.tcl [KiteInfo_pkgModules]
    treefile lib/kiteinfo/kiteinfo.tcl   [KiteInfo_kiteinfo $metadata]
}

# KiteInfo_pkgIndex
#
# Returns the contents of the kiteinfo(n) pkgIndex.tcl file.

codeblock subtree::KiteInfo_pkgIndex {} {
    set project [project name]
    set description [project description]
} {
    #-------------------------------------------------------------------------
    # TITLE:
    #    pkgIndex.tcl
    #
    # PROJECT:
    #    %project - %description
    #
    # DESCRIPTION:
    #    kiteinfo(n) package index file
    #
    #    Generated by Kite.
    #-------------------------------------------------------------------------

    package ifneeded kiteinfo 1.0 [list source [file join $dir pkgModules.tcl]]
}

# KiteInfo_pkgModules
#
# Returns the contents of the kiteinfo(n) pkgModules.tcl file.

codeblock subtree::KiteInfo_pkgModules {} {
    set project [project name]
    set description [project description]
} {
    #-----------------------------------------------------------------------
    # TITLE:
    #    pkgModules.tcl
    #
    # PROJECT:
    #    %project - %description
    #
    # DESCRIPTION:
    #    kiteinfo(n) package modules file
    #
    #    Generated by Kite.
    #-----------------------------------------------------------------------

    #-----------------------------------------------------------------------
    # Package Definition

    package provide kiteinfo 1.0

    #-----------------------------------------------------------------------
    # Namespace definition

    namespace eval ::kiteinfo:: {
        variable library [file dirname [info script]]
    }

    #-----------------------------------------------------------------------
    # Modules

    source [file join $::kiteinfo::library kiteinfo.tcl]
}

# KiteInfo_kiteinfo
#
# metadata   - The project metadata, as an [array get] dictionary.
#
# Returns the contents of the kiteinfo(n) kiteinfo.tcl file.

codeblock subtree::KiteInfo_kiteinfo {metadata} {
    set project     [project name]
    set description [project description]

    set list [list]
    foreach {key value} $metadata {
        lappend list [list $key $value]
    }
    set metadata [join $list "\n        "]
} {
    #-----------------------------------------------------------------------
    # TITLE:
    #   kiteinfo.tcl
    #
    # PROJECT:
    #   %project - %description
    #
    # DESCRIPTION:
    #   Kite: kiteinfo(n) Package
    #
    #   This package was auto-generated by Kite to provide the 
    #   project %project's code with access to the contents of its 
    #   project.kite file at runtime.
    #
    #   Generated by Kite.
    #-----------------------------------------------------------------------

    namespace eval ::kiteinfo:: {
        variable kiteInfo

        array set kiteInfo {
            %metadata
        }

        namespace export \\
            project      \\
            version      \\
            description  \\
            includes     \\
            gui          \\
            require

        namespace ensemble create
    }

    #-----------------------------------------------------------------------
    # Commands

    # project
    #
    # Returns the project name.
    # FIXME: should be kiteinfo(project) when project.tcl is updated.

    proc ::kiteinfo::project {} {
        variable kiteInfo

        return $kiteInfo(name)
    }

    # version
    #
    # Returns the project version number.

    proc ::kiteinfo::version {} {
        variable kiteInfo

        return $kiteInfo(version)
    }

    # description
    #
    # Returns the project description.

    proc ::kiteinfo::description {} {
        variable kiteInfo

        return $kiteInfo(description)
    }

    # includes
    #
    # Returns the names of the "include" libraries.

    proc ::kiteinfo::includes {} {
        variable kiteInfo

        return $kiteInfo(includes)
    }

    # gui app
    #
    # app  - An application name
    #
    # Returns 1 if the app is supposed to have a GUI, and 0 otherwise.

    proc ::kiteinfo::gui {app} {
        variable kiteInfo

        return $kiteInfo(gui-$app)
    }
}



