#-----------------------------------------------------------------------
# TITLE:
#   subtree_pkg.tcl
#
# AUTHOR:
#   Will Duquette
#
# DESCRIPTION:
#   Kite: kiteapp(n), "pkg" subtree writer.
#
#-----------------------------------------------------------------------

namespace eval subtree:: {
    namespace export \
        pkg
}

# pkg name module
#
# name   - The package name
# module - The first $module.tcl file in the package.
#
# Saves the package subtree to lib/$name/*.  If the module name is
# "main", it outputs an application main module.

proc subtree::pkg {name module} {
    treefile lib/$name/pkgIndex.tcl    [Pkg_pkgIndex $name]
    treefile lib/$name/pkgModules.tcl  [Pkg_pkgModules $name $module]

    if {$module eq "main"} {
        treefile lib/$name/$module.tcl [Pkg_main $name]
    } else {
        treefile lib/$name/$module.tcl [Pkg_module $name $module]
    }

    treefile test/$name/all_tests.test [Pkg_all_tests $name]
    treefile test/$name/$module.test   [Pkg_test $name $module]
}

# Pkg_pkgIndex name
#
# name - The name of the new package
#
# Returns the contents of the $package(n) pkgIndex.tcl file.

codeblock subtree::Pkg_pkgIndex {name} {
    set project [project name]
    set version [project version]
    set description [project description]
} {
    #-------------------------------------------------------------------------
    # TITLE:
    #    pkgIndex.tcl
    #
    # PROJECT:
    #    %project - %description
    #
    # DESCRIPTION:
    #    %name(n) package index file
    #
    #    Generated by Kite.
    #-------------------------------------------------------------------------

    # -kite-ifneeded-start  DO NOT EDIT THIS BLOCK BY HAND
    package ifneeded %name %version [list source [file join $dir pkgModules.tcl]]
    # -kite-ifneeded-end
}

# Pkg_pkgModules name module
#
# name      - The name of the new package
# module    - The name of the new package's first module.
#
# Returns the contents of the $package(n) pkgModules.tcl file.

codeblock subtree::Pkg_pkgModules {name module} {
    set project [project name]
    set version [project version]
    set description [project description]
} {
    #-----------------------------------------------------------------------
    # TITLE:
    #    pkgModules.tcl
    #
    # PROJECT:
    #    %project - %description
    #
    # DESCRIPTION:
    #    %name(n) package modules file
    #
    #    Generated by Kite.
    #-----------------------------------------------------------------------

    #-----------------------------------------------------------------------
    # Package Definition

    # -kite-provide-start  DO NOT EDIT THIS BLOCK BY HAND
    package provide %name %version
    # -kite-provide-end

    #-----------------------------------------------------------------------
    # Required Packages

    # Add 'package require' statements for this package's external 
    # dependencies to the following block.  Kite will update the versions 
    # numbers automatically as they change in project.kite.

    # -kite-require-start ADD EXTERNAL DEPENDENCIES
    # -kite-require-end

    #-----------------------------------------------------------------------
    # Namespace definition

    namespace eval ::%name:: {
        variable library [file dirname [info script]]
    }

    #-----------------------------------------------------------------------
    # Modules

    source [file join $::%name::library %module.tcl]
}

# Pkg_module name module 
#
# name      - The name of the new package
# module    - The name of the new package's first module.
#
# Returns the contents of the package's $module.tcl file.

codeblock subtree::Pkg_module {name module} {
    set project     [project name]
    set description [project description]
} {
    #-----------------------------------------------------------------------
    # TITLE:
    #   %module.tcl
    #
    # PROJECT:
    #   %project - %description
    #
    # DESCRIPTION:
    #   %name(n) Package, %module module.
    #
    #-----------------------------------------------------------------------

    namespace eval ::%name:: {
        namespace export \\
            hello

        namespace ensemble create
    }

    #-----------------------------------------------------------------------
    # Commands

    # hello
    #
    # Dummy example proc.

    proc ::%name::hello {} {
        puts "%name(n): Hello, world!"
    }
}

# Pkg_main name 
#
# name      - The name of the new package
#
# Returns the contents of the package's main.tcl file.

codeblock subtree::Pkg_main {name} {
    set project     [project name]
    set description [project description]
} {
    #-----------------------------------------------------------------------
    # TITLE:
    #   main.tcl
    #
    # PROJECT:
    #   %project - %description
    #
    # DESCRIPTION:
    #   %name(n) Package, main module.
    #
    #-----------------------------------------------------------------------

    #-----------------------------------------------------------------------
    # Commands

    # main argv
    #
    # argv  - Arguments
    #
    # Dummy example main proc.

    proc main {argv} {
        puts "[kiteinfo project] [kiteinfo version]: [kiteinfo description]"
        puts ""
        puts "Arguments: <$argv>"
    }
}

# Pkg_all_tests name
#
# name      - The name of the new package
#
# Returns the contents of the package's all_tests.test file.

codeblock subtree::Pkg_all_tests {name} {
    set project     [project name]
    set description [project description]
} {
    # -*-Tcl-*-
    #-----------------------------------------------------------------------
    # TITLE:
    #    all_tests.test
    #
    # PROJECT:
    #    %project - %description
    #
    # DESCRIPTION:
    #    %name(n) test suite: all tests
    #
    #    Generated by Kite
    #-----------------------------------------------------------------------

    #-----------------------------------------------------------------------
    # Initialize tcltest(n)

    if {[lsearch [namespace children] ::tcltest] == -1} {
        package require tcltest 2.2 
        eval ::tcltest::configure $argv
    }

    ::tcltest::configure \\
        -testdir [file dirname [file normalize [info script]]] \\
        -notfile all_tests.test

    #-----------------------------------------------------------------------
    # Run all of the tests in this directory

    ::tcltest::runAllTests
}

# Pkg_test name module 
#
# name      - The name of the new package
# module    - The name of the new package's first module.
#
# Returns the contents of the package's $module.test file.

codeblock subtree::Pkg_test {name module} {
    set project     [project name]
    set description [project description]
} {
    # -*-Tcl-*-
    #-----------------------------------------------------------------------
    # TITLE:
    #    %module.test
    #
    # PROJECT:
    #    %project - %description
    #
    # DESCRIPTION:
    #    %name(n) test suite for %module.tcl
    #
    #-----------------------------------------------------------------------

    #-----------------------------------------------------------------------
    # Initialize tcltest(n)

    if {[lsearch [namespace children] ::tcltest] == -1} {
        package require tcltest 2.2 
        eval ::tcltest::configure $argv
    }

    namespace import ::tcltest::test
     
    #-----------------------------------------------------------------------
    # Load the package to be tested

    package require %name
    namespace import ::%name::*

    #-------------------------------------------------------------------
    # Setup

    # setup
    #
    # Set up for tests

    proc setup {} {
        # TBD
    }

    # cleanup
    #
    # Cleans up after a test.

    proc cleanup {} {
        # TBD
    }


    #-------------------------------------------------------------------
    # dummy

    test dummy-1.1 {Dummy} -setup {
        setup
    } -body {
        set result 0
    } -cleanup {
        cleanup
    } -result {1}


    #-------------------------------------------------------------------
    # Cleanup

    tcltest::cleanupTests
}







