<manpage {kiteutils(n) macro(n)} "Macro Processor">

<xrefset textutil::expander(n) textutil::expander(n) \
        "http://tcllib.sourceforge.net/doc/expander.html">

<section SYNOPSIS>

<pre>
package require kiteutils <version>
namespace import ::kiteutils::*
</pre>

<itemlist>

<section DESCRIPTION>

macro(n) defines a Tcl-based macro expansion processor.  Input consists
of plain text with embedded macros; the macros are evaluated, and their 
return values are inserted into the body of text in their place.<p>

See <xref macro(5)> for the basic syntax and standard macros.<p>

Instances of macro(n) are wrapper around the Tcllib 
<xref textutil::expander(n)> module, using a
<xref smartinterp(n)> object as the macro interpreter.<p>

<section MACROS>

The <xref macro(5)> man page describes some standard macros; and this 
module provides tools for adding additional macros.  In general,
new macros are defined in sets using the <xref macroset(i)> interface;
a <xref macroset(i)> object is then registered with the 
macro(n) instance using the <iref register> method.<p>

Macros are expanded in a safe <xref smartinterp(n)> interpreter.  Any
Tcl commands present in the interpreter can be used as a macro.<p>


<section COMMANDS>

<deflist commands>

<defitem macro {macro <i>name</i>}>

Creates a new macro(n) object called <i>name</i>. The object is
represented as a new Tcl command in the caller's scope;
<iref macro> returns the fully-qualified form of the
<i>name</i>.<p>

The processor is manipulated via the subcommands of the
<iref macro> command, which are as follows:<p>

</deflist commands>

<section "INSTANCE COMMAND">

Each instance of the <iref macro> object has the following
subcommands:<p>

<deflist instance>

<defitem cget {<i obj> cget <i>varname</i>}>
<defitem cis {<i obj> cis <i>cname</i>}>
<defitem cname {<i obj> cname}>
<defitem cpop {<i obj> cpop <i>cname</i>}>
<defitem cpush {<i obj> cpush <i>cname</i>}>
<defitem cset {<i obj> cset <i>varname value</i>}>
<defitem cvar {<i obj> cvar <i>varname</i>}>
<defitem errmode {<i obj> errmode}>
<defitem lb {<i obj> lb}>
<defitem rb {<i obj> rb}>
<defitem setbrackets {<i obj> setbrackets}>
<defitem where {<i obj> where}>

These commands provide access to the <xref textutil::expander(n)>;
see that man page for details.<p>

<defitem alias {<i obj> alias <i>srcToken</i>}>
<defitem alias {<i obj> alias <i>srcToken</i> {}}>
<defitem alias {<i obj> alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>
<defitem alias {<i obj> alias <i>srcCmd targetCmd</i> ?<i>arg...</i>?}>
<defitem ensemble {<i obj> ensemble <i>alias</i>}>
<defitem proc {<i obj> proc <i>name arglist body</i>}>
<defitem smartalias {<i obj> smartalias <i>alias min max argsyn prefix</i>}>

These commands are used to define commands in the macro interpreter, i.e.,
to define new macros.  See <xref smartinterp(n)> for details.<p>

<defitem reset {<i obj> reset}>

Re-initializes the macro interpreter, defining any macros in registered
macro sets.  Any other macros defined by the client
will need to be redefined.<p>

<defitem register {<i obj> register <i macroset>}>

Registers a <xref macroset(i)> macro set with this macro processor.
Its macros will be defined for use on the next <i reset>.<p>

<defitem eval {<i obj> eval <i>script</i>}>

Evaluates the script in the context of the macro interpreter.<p>

<defitem expand {<i obj> expand <i>text</i>}>

Expands the <i>text</i> in two passes, and returns the result of the
expansion.   Use <iref pass> to write
macros which are pass-sensitive.<p>

<defitem expandfile {<i obj> expandfile <i>name</i>}>

Reads the contents of the text file called <i>name</i>, expands it in
two passes, and returns the expansion.  Use <iref pass> to write
macros which are pass-sensitive.<p>

<defitem expandonce {<i obj> expandonce <i text>}>

Does a simple single-pass expansion of the text.  This is useful in
the implementation of macros that recursively expand one or more of
their arguments, as it leaves the <iref pass> number unchanged.<p>

<defitem pass {<i obj> pass}>

Returns the expansion pass number, 1 or 2.   It's common to build up 
indices during the first pass and generate tables of links in the 
second.<p>

<defitem warn {<i obj> warn <i text>}>

Outputs the <i text> to the console as a warning.
<b TODO:> There should be a <tt -warncmd> option to handle the warning.<p>

</deflist ehtml>

<section "SEE ALSO">

<xref macro(5)>, <xref textutil::expander(n)>.

<section ENVIRONMENT>

macro(n) requires Tcl 8.6 or later.

To use macro(n) in a Tcl script, the environment variable
<code>TCLLIBPATH</code> must include the parent of the kitedocs(n)
library directory.

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original package, based on code in the JNEM jnem_man(1) tool,
heavily revised for Kite.

</manpage>






