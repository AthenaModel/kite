<manpage project(5) "Kite Project File Format">

<section SYNOPSIS>

<itemlist>

<section DESCRIPTION>

The man page defines the syntax of Kite's <code>project.kite</code> file.
The Kite project file defines the project's name, version, external
dependencies, and build targets, so that Kite can perform various 
development tasks automatically.<p>

Note that the Kite project file is a Tcl script, and so 
normal Tcl syntax rules apply.<p>

Every Kite project file begins with a <iref project> statement.  This is
typically followed by one or more build target statements, e.g.,
<iref app> and <iref provide>.  These are followed by
<iref require> and <iref include> statements that define the project's
external dependencies.<p>

A project's project file is usually created by Kite as part of initializing
the project's directory tree, and is then updated by the developer as
needed.<p>

<section STATEMENTS>

Kite project files may contain the following statements.<p>

<deflist statements>

<defitem project {project <i>name version description</i>}>

<b>Required.</b> This statement names the project, its
current <i>version</i>, and a brief text <i>description</i>.  
The project name and version are usually defined to match the 
project's name in the VCS of choice.<p>

For example,<p>

<pre>
project athena-mars 3.0.0 "Mars Simulation Support Library"
</pre>

The version number must be a valid Tcl package version number, as 
described on Tcl's package(n) man page, except that it may include
an optional suffix.  Tcl package version numbers should consist of two 
or more integers, separated by dots; the final dot may be replaced by
"a" or "b", indicating alpha or beta status.  The suffix, if given,
can be any word preceded by a hyphen.  Thus, the following are valid
project version numbers:<p>

<ul>
<li> <tt>1.2</tt>
<li> <tt>1a2</tt>
<li> <tt>1.2b3</tt>
<li> <tt>1.2.3</tt>
<li> <tt>1.2.3-MYSUFFIX</tt>
</ul>

<defitem poc {poc <i>email</i>}>

Specifies the e-mail address of the project's primary point-of-contact
(POC).  This is made available to <xref kitedoc(5)> documentation.<p>

<defitem app {app <i name> ?<i options...>?}>

This statement tells Kite that the project builds an application called
<i name>.  The application has loader script <tt>bin/<i name>.tcl</tt>,
and its main routine will be in <tt>lib/<i name>app/main.tcl</tt>.  Of
the external dependencies listed in the project file, it will require
those included in the external dependency block in its 
<tt>lib/<i name>app/pkgModules.tcl</tt> file.<p>

By default, it will be built as a console-mode starkit.  The following
options may be used:<p>

<deflist options>

<defopt {-apptype kit|exe}>

To build a starkit (the default), select <b kit>; to build a standalone
executable, select <b exe>.<p>

<b TODO:> On OS X, we should have an additional option, <b app>, which
builds an OS X .app.<p>

<defopt {-gui}>

If present, the application will load Tk automatically; and when built
as a standalone executable, will be built using a Tk basekit.<p>

</deflist options>

A project may contain any number of applications; the first listed in
<tt project.kite> is called the <i primary> application.<p>

<defitem provide {provide <i>name</i>}>

This statement tells Kite that the project provides a Tcl library package
intended for use by other projects.  The package will be called 
<i>name</i>; it must reside in <tt>lib/<i name></tt>, and will 
always have the same version number as the project as a whole.<p>

A project may contain any number of library packages.  Note that only
packages intended for export need to be declared with <iref provide>; a 
project defining an <iref app> will often contain a 
number of packages intended for use only by the application itself, and 
these need not be declared.<p>

If the normal template is used when defining the library (i.e., 
<code>kite new</code> or <code>kite add</code>), then Kite will 
automatically update the version number in the library's 
<tt>lib/<i name>/pkgIndex.tcl</tt> and
<tt>lib/<i name>/pkgModules.tcl</tt> files.  Moreover, the 
<tt>lib/<i name>/pkgModules.tcl</tt> will contain a block marked 
"ADD EXTERNAL DEPENDENCIES".  If you place <tt package require> statements
in that block, corresponding to the external dependencies listed in 
<tt project.kite> for those external libraries this package actually uses,
Kite will keep their version numbers consistent with those in 
<tt project.kite>.<p>

<defitem require {require <i>name version</i> ?<i>options...</i>?}>

This statement tells Kite that the project wants to run against the teapot
package with the given name and version, where version takes any of the
normal forms for <code>package require</code>.<p>

By default, Kite assumes that the package is available from the ActiveState
Teapot Repository, and will install it into the local teapot on 
<code>kite deps update</code>.  If the <b>-local</b> option is given, then 
the package is assumed to be locally built and installed into the local 
teapot by hand. Kite will report on its absence, but will not attempt to 
fetch it.

Required packages will be built into the project's <iref app>
and (<b TODO>) dependencies on required packages will be noted in 
<iref provide> packages when built as teapot .zip files.

<defitem include {include <i>name vcs url tag</i>}>

This statement tells Kite that this project depends on another project 
called <i>name</i>, and directs Kite to pull the other project's code from 
its VCS repository into the "<i>root</i>/includes/<i>name</i>" directory
so that this project can make use of it.<p>

The <i>vcs</i> may be <b>git</b> or <b>svn</b>.  The <i>url</i> is the base 
URL of the project in the Git or Subversion repository.  The <i>tag</i>
is the specific version of the project to retrieve.  For Git, the 
<i>tag</i> can be a branch or tag name; for Subversion, the 
<i>tag</i> will simply be added to
the <i>url</i> as <i>url/tag</i>.<p>

Kite assumes that the included project contains one or more Tcl
packages in its "lib" directory, and thus adds 
"<i>root</i>/includes/<i>name</i>/lib" to the <tt>auto_path</tt>.<p>

When an <iref app> is built, the included projects 
will be built into it.  For <iref provide>-only projects, the included 
projects are available for testing but
will not be built into the exported packages.<p>

<defitem shell {shell <i>script</i>}>

The <i>script</i> will be automatically loaded in the Tcl shell produced by
the <code>kite shell</code> command for "lib-only" projects or if 
<code>kite shell -plain</code> is used. This allows the project to 
customize the initial state of the shell.

</deflist statements>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original file format.<p>

</manpage>







