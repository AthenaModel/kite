<manpage project(5) "Kite Project File Format">

<section SYNOPSIS>

<itemlist>

<section DESCRIPTION>

The man page defines the syntax of Kite's <code>project.kite</code> file.
The Kite project file defines the project's name, version, external
dependencies, and build targets, so that Kite can perform various 
development tasks automatically.<p>

Note that the Kite project file is a Tcl script, and so 
normal Tcl syntax rules apply.<p>

Every Kite project file begins with a <iref project> statement.  This is
typically followed by one or more build target statements, e.g.,
<iref app> and <iref provide>.  These are followed by
<iref require> statements that define the project's
external dependencies.<p>

A project's project file is usually created by Kite as part of initializing
the project's directory tree, and is then updated by the developer as
needed.<p>

<section STATEMENTS>

Kite project files may contain the following statements.<p>

<deflist statements>

<defitem project {project <i>name version description</i>}>

<b>Required.</b> This statement names the project, its
current <i>version</i>, and a brief text <i>description</i>.  
The project name and version are usually defined to match the 
project's name in the VCS of choice.<p>

For example,<p>

<pre>
project athena-mars 3.0.0 "Mars Simulation Support Library"
</pre>

The version number must be a valid Tcl package version number, as 
described on Tcl's package(n) man page, except that it may include
an optional suffix.  Tcl package version numbers should consist of two 
or more integers, separated by dots; the final dot may be replaced by
"a" or "b", indicating alpha or beta status.  The suffix, if given,
can be any word preceded by a hyphen.  Thus, the following are valid
project version numbers:<p>

<ul>
<li> <tt>1.2</tt>
<li> <tt>1a2</tt>
<li> <tt>1.2b3</tt>
<li> <tt>1.2.3</tt>
<li> <tt>1.2.3-MYSUFFIX</tt>
</ul>

<defitem poc {poc <i>email</i>}>

Specifies the e-mail address of the project's primary point-of-contact
(POC).  This is made available to <xref kitedoc(5)> documentation.<p>

<defitem app {app <i name> ?<i options...>?}>

This statement tells Kite that the project builds an application called
<i name>.  The application has loader script <tt>bin/<i name>.tcl</tt>,
and its main routine will be in <tt>lib/<i name>app/main.tcl</tt>.  Of
the external dependencies listed in the project file, it will require
those included in the external dependency block in its 
<tt>lib/<i name>app/pkgModules.tcl</tt> file.<p>

By default, it will be built as a console-mode starkit.  The following
options may be used:<p>

<deflist options>

<defopt {-apptype kit|exe}>

To build a starkit (the default), select <b kit>; to build a standalone
executable, select <b exe>.<p>

<b TODO:> On OS X, we should have an additional option, <b app>, which
builds an OS X .app.<p>

<defopt {-gui}>

If present, the application will load Tk automatically; and when built
as a standalone executable, will be built using a Tk basekit.<p>

</deflist options>

A project may contain any number of applications; the first listed in
<tt project.kite> is called the <i primary> application.<p>

<defitem provide {provide <i>name</i> ?<i options>?}>

This statement tells Kite that the project provides a Tcl library package
intended for use by other projects.  The package will be called 
<i>name</i>; it must reside in <tt>lib/<i name></tt>, and will 
always have the same version number as the project as a whole.<p>

A project may contain any number of library packages.  Note that only
packages intended for export need to be declared with <iref provide>; a 
project defining an <iref app> will often contain a 
number of packages intended for use only by the application itself, and 
these need not be declared.<p>

If the normal template is used when defining the library (i.e., 
<code>kite new</code> or <code>kite add</code>), then Kite will 
automatically update the version number in the library's 
<tt>lib/<i name>/pkgIndex.tcl</tt> and
<tt>lib/<i name>/pkgModules.tcl</tt> files.  Moreover, the 
<tt>lib/<i name>/pkgModules.tcl</tt> will contain a block marked 
"ADD EXTERNAL DEPENDENCIES".  If you place <tt package require> statements
in that block, corresponding to the external dependencies listed in 
<tt project.kite> for those external libraries this package actually uses,
Kite will keep their version numbers consistent with those in 
<tt project.kite>.<p>

<b Binary Packages:> If the project exports a binary Tcl extension, the
extension should be built as a TEA extension in a 
"<tt src/mylib>" subdirectory, and installed into "<tt lib/mylib>" when
it is built.  Then, the <b -binary> option should be used to tell Kite
that the provided package is a binary extension:<p>

<example>
provide Mylib -binary
src Mylib ...
</example>

<defitem src {src <i name> ?<i options...>?}>

This statement tells Kite that the project contains a directory,
<tt src/><i name>, containing some kind of code to be 
compiled.  The directory might define a binary Tcl package, or some 
other compiled product (i.e., a .a library to be linked with a binary
Tcl package).<p>

By default, Kite assumes that the named directory contains a 
<tt Makefile>, and that it can issue "<tt make ...>" commands to build the
directory's contents and clean up the build products.  Alternatively, the
user can specify how to do this by passing the following options:<p>

<deflist options>

<defopt {-build <i command>}>

Specifies the command used to build the directory's contents.  
Defaults to "<tt make clean all>".<p>

<defopt {-clean <i command>}>

Specifies the command used to clean up the directory's build products.
Defaults to "<tt make clean>".<p>

</deflist options>

If the directory contains a binary extension, the <b -build> command 
should "install" the extension into "<tt lib/><i name>", 
and the <b -clean> command should remove it.  In addition, if the project
needs to export the library it should include the following statement
in <tt project.kite>:<p>

<example>provide <i name> -binary</example>

<defitem require {require <i>name version</i> ?<i>options...</i>?}>

This statement tells Kite that the project wants to run against the teapot
package with the given name and version, where version takes any of the
normal forms for <code>package require</code>.<p>

By default, Kite assumes that the package is available from the ActiveState
Teapot Repository, and will install it into the local teapot on 
<code>kite deps update</code>.  If the <b>-local</b> option is given, then 
the package is assumed to be locally built and installed into the local 
teapot by hand. Kite will report on its absence, but will not attempt to 
fetch it.

Required packages will be built into the project's <iref app>
and (<b TODO>) dependencies on required packages will be noted in 
<iref provide> packages when built as teapot .zip files.

<defitem dist {dist <i name patterns>}>

The <tt kite dist> command builds distribution .zip files for the project.
This command defines a distribution target called <i name>; the
<i patterns> indicate the specific files to include in the .zip file.<p>

The <i name> may include the token "%platform"; if so, it will be replaced
by the return value of <tt platform::identify>.  This is appropriate for
installation sets for projects containing stand-alone executables.<p>

The value of <i patterns> is a list of patterns; each pattern is one of the
following:<p>

<ul>
<li> A glob pattern relative to the project root, e.g., 
     "<tt docs/*.html>".  This includes all matching files from the 
     project tree.<p>

<li> The special pattern <b %apps>.  This includes all of the project's
     application executables.<p>

<li> The special pattern <b %libs>.  This includes the teapot .zip files
     for each of the project's <iref provide>d library packages.<p>

<li> The special pattern <b %get>, which is followed by a list of two
     elements: a relative path and a URL.  Kite will retrieve the document
     at the URL, and include it in the distribution .zip file at the 
     given path.  This is useful for large documents in binary formats.<p>
</ul>

A project may define any number of distribution targets; by convention,
the main one is called "install".<p>

For example, a typical "install" distribution for a project delivering one or more applications as starkits might look like this:<p>

<example>
dist install {
    README.md
    LICENSE.md
    docs/*.html
    docs/*/*.html
    %apps
}
</example><p>

If the project delivers its applications as stand-alone executables, and also
provides one or more libraries, it might look like this:

<example>
dist install-%platform {
    README.md
    LICENSE.md
    %get { docs/ug.docx http://www.example.com/ug.docx }
    docs/*.html
    docs/*/*.html
    %apps
    %libs
}
</example>

<defitem shell {shell <i>script</i>}>

The <i>script</i> will be automatically loaded in the Tcl shell produced by
the <code>kite shell</code> command for "lib-only" projects or if 
<code>kite shell -plain</code> is used. This allows the project to 
customize the initial state of the shell.

</deflist statements>

<section AUTHOR>

Will Duquette<p>

<section HISTORY>

Original file format.<p>

</manpage>







